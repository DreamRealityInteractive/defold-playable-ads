function init(self)
	msg.post(".", "acquire_input_focus")

	-- for development
	if defos then
		defos.set_maximized(true)
	end
	
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	self.level_factory_ids = collectionfactory.create("#level_factory")
	self.level_id = self.level_factory_ids[hash("/level")]
	msg.post("/interface", "level_show")
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("shovel_start") then
		self.start_pos = message.pos

	elseif message_id == hash("shovel_finish") then
		self.finish_pos = message.pos

	elseif message_id == hash("new_shovel") then
		-- print("NEW SHOVEL " .. message.shovel_id)
		self.shovel = message.shovel_id

	elseif message_id == hash("next_level") then
		self.level_ready = false

		timer.delay(0.5, false, function()
			local old_level_ids = self.level_factory_ids
			msg.post("/interface", "next_level")

			go.delete_all(old_level_ids)

			self.level_factory_ids = collectionfactory.create("#level_factory")
			self.level_id = self.level_factory_ids[hash("/level")]
		end)

	elseif message_id == hash("level_all_hit") then
		msg.post(".", "next_level")
		msg.post("/interface", "level_hide")

	elseif message_id == hash("level_show") then

	elseif message_id == hash("level_ready") then
		self.level_ready = true
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		if self.shovel and self.level_ready then
			msg.post("/interface#tutorial", "disable")
			
			msg.post(self.shovel, "throw", {
				from = self.start_pos,
				to = self.finish_pos
			})
			self.shovel = nil
			msg.post("/shovel_spawn", "spawn")
		end
	end
end
